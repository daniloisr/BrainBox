<html>

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"> 
	<link rel="shortcut icon" type="image/x-icon" href="/favicon.png" />
    <title>{{title}}</title>
	<link rel="stylesheet" href="/stylesheets/style.css" />
	<link href='https://fonts.googleapis.com/css?family=Roboto:100' rel='stylesheet' type='text/css'>

	<style>
	#projectFiles>table>tbody>tr>td>select{
		color:rgba(255,255,255,0.4);
	}

	#projectFiles {
		overflow:scroll;
	}
	.block {
		border:thin solid #555;
		padding: 5px;
	}
	#right {
	    background-color: black;
	}
	</style>

</head>

<body>

<div style="width:100%;height:100%;display:flex;flex-direction:column;align-items:stretch">
	
	<!-- Header -->
	<div style="flex:0 0 100px">
		<a href='/'>
			<img style='position:absolute;left:10px;top:5px;width:200px' src='/img/brainbox-logo-small_noFont.svg'/>
		</a>
		<div style="position:absolute;left:73px;top:21px;width:auto; font-family: Roboto, sans-serif; font-size: 36px; font-weight:300">
			{{projectName}}
		</div>
		<div id="menu">
			<img id="addProject" class="button" title="Add project" style='width:13px' src='/img/plus.svg'/>
			<img id="settings" class="button" title="Settings" style='width:13px' src='/img/settings.svg'/>
			<img id="search" class="button" title="Search" style='width:13px' src='/img/search.svg'/>
			<img id="doc" class="button" title="Documentation" style='width:13px' src='/img/doc.svg'/>
			<a href="https://github.com/OpenNeuroLab/BrainBox/issues" target="_blank"><img id="bug" class="button" title="report a bug" style='width:14px' src='/img/bug.svg'/></a>
			<div id="MyLogin">
				<span>{{{login}}}</span>
			</div>
		</div>
	</div>
	
	<!-- Content -->
	<div id="content" style="flex:1 1 auto;position:relative">
		<div style="display:flex;width:100%;height:100%;align-items:stretch;position:absolute">

			<div id="left" style="flex:0 0 400px;position:relative">
			
				<div style="display:flex;flex-direction:column;height:100%">
					<!-- Tools -->
					<div id="tools" class="block" style="flex:1 0 auto">
					</div>
				
					<!-- Project Files -->
					<div id="projectFiles" class="block" style="flex:1 1 auto">
						<table style="width:100%;text-align:left">
							<thead>
								<tr>
									<th>Name</th>
									<th>File</th>
								</tr>
							</thead>
							<tbody>
							</tbody>
						</table>
					</div>
				
					<!-- File Annotations -->
					<div id="annotations" class="block" style="flex:1 1 200px">
						<table id="info" style="width:100%;text-align:left">
							<thead>
								<tr>
									<th>Name</th>
									<th>Label Set</th>
								</tr>
							</thead>
                            <tbody>
                            </tbody>
						</table>
					</div>
				</div>
				
				<div id="resizeButton" class="block">
				</div>
				
			</div>
			
			<div id="right" style="flex:1 0;position:relative">
				<div id="stereotaxic" style="width:100%;height:100%">
				</div>
				
				<style>
				    @-webkit-keyframes loading {
                        0% {left: 40%;}
                        50% {left: 60%;}
                        100% {left: 40%;}
                    }
                    #loadingIndicator {
                        display:none;
                        position:absolute;
                        left:0;
                        top:0;
                        width:100%;
                        height:100%;
                        background:rgba(0,0,0,0.5);
                    }
                    #loadingIndicator .disc {
                        position:absolute;
                        left:50%;
                        transform:translate( -50% , 0 );
                        width:8px;
                        height:8px;
                        border-radius:8px;
                        background:white;
                        -webkit-animation-name: loading;
                        -webkit-animation-duration: 1s;
                        -webkit-animation-iteration-count: infinite;
                        -webkit-animation-timing-function: ease-in-out;
                        animation-name: loading;
                        animation-duration: 1s;
                        animation-iteration-count: infinite;
                        animation-timing-function: ease-in-out;
                    }
				</style>
				
				<div id="loadingIndicator">
				    <p>Loading...</p>
				    <div class="disc"></div>
				</div
			</div>

		</div>
	</div>
</div>

<!-- Labels -->
<div id="labelset">
	<div style="z-index:23;text-align:right">
		<img id="labels-close" class="button" src="/img/times-circle.svg"/>
	</div>

	<ul style="padding-left:1rem">
		<li>
			<b>Label Set</b><br/>
			<span id="labels-name"></span>
		</li>
		<li>
			<b>Labels</b><br/>
			<div id="label-list">
			</div>
			<div id="label-template">
				<div class="label-color"></div>
				<span class="label-name">Label Name</name>
			</div>
		</li>
	</ul>
</div>
<!-- End Labels -->

<script src="/lib/jquery-3.1.1.min.js"></script>
<script src="/lib/pako/pako.min.js"></script>
<script src="/lib/purify.min.js"></script>
<script src="/js/twoWayBinding.js"></script>
<script src="/js/brainbox.js"></script>
<script>

/*
	This variable contains project metadata
	and is filled by the server, from the database.
*/
var projectInfo={{{projectInfo}}};
var annotations = {
    text: [],   // collect text annotations
    volume: []  // collect volume annotations
};
var k, str;

// collect the project's text annotations
for(k in projectInfo.annotations.list) {
    if (projectInfo.annotations.list[k].type === "text") {
        $("#projectFiles thead tr").append("<th>" + projectInfo.annotations.list[k].name + "</th>");
        annotations.text.push(projectInfo.annotations.list[k]);
    }
}

// collect the project's volume annotations
for(k in projectInfo.annotations.list) {
    if (projectInfo.annotations.list[k].type === "volume") {
        annotations.volume.push(projectInfo.annotations.list[k]);
    }
}

function loadProjectFile(url) {
	var params={url:url,view:"cor",slice:180,fullscreen:false};
    $("#loadingIndicator").show();
	$.post("/mri/json",{url:url})
	.done(function from_loadProjectFile(info) {
	    if($.isEmptyObject(info) === false) {
            
            console.log("info",info);
            
            // check if the mri contains the required annotations
            var irow; // index of the table row
            var iarr; // index of the object in the data array
            for(irow=0;irow<annotations.volume.length;irow++) {
                found = false;
                for(iarr=0;iarr<info.mri.atlas.length;iarr++) {
                    if(annotations.volume[irow].name == info.mri.atlas[iarr].name
                       && projectInfo.shortname == info.mri.atlas[iarr].project) {
                        found=true;
                        break;
                    }
                }
                // if it doesn't, create them
                if(found==false) {
                    // add annotation
                    var date=new Date();
                    // add data to annotations array
                    var atlas = {
                        name:annotations.volume[irow].name,
                        project:projectInfo.shortname,
                        created: date.toJSON(), 
                        filename: Math.random().toString(36).slice(2)+".nii.gz",	// automatically generated filename
                        labels: annotations.volume[irow].values,
                        owner: AtlasMakerWidget.User.username,
                        type: "volume"
                    };
                    info.mri.atlas.push(atlas);
                }
                
                annotations.volume[irow].annotationItemIndex=iarr;
            }
            params.info=info;
            
            if(annotations.volume[0]) {
                params.annotationItemIndex = annotations.volume[0].annotationItemIndex;
            } else {
                params.annotationItemIndex = -1;
            }
            
            BrainBox.configureBrainBox(params)
                .then(function from_project(){

                    // bind volume annotations to table#info
                    var annvol_proxy={};
                    var aParam = {
                        table: $("table#info"),
                        info_proxy: annvol_proxy,
                        info: BrainBox.info,
                        trTemplate: $.map([
                            "<tr>",
                            " <td></td>",           // volume name
                            " <td></td>",	        // volume label set
                            "</tr>"],function(o){return o}).join(),
                        objTemplate: [
                            {	typeOfBinding:1,
                                path:"mri.atlas.#.name"
                            },
                            {	typeOfBinding:1,
                                path:"mri.atlas.#.labels"
                            }
                        ]
                    };

                    // add and bind new table row
                    for(irow=0;irow<annotations.volume.length;irow++) {    
                        BrainBox.appendAnnotationTableRow2(irow,annotations.volume[irow].annotationItemIndex,aParam);
                    }
                    // update in server
                    BrainBox.saveAnnotations(aParam);

                    // select the first annotation by default
                    // (should be read from project settings)
                    $("#annotations tbody tr:eq(0)").addClass("selected");

                    AtlasMakerWidget.User.projectPage = projectInfo.shortname;
                    AtlasMakerWidget.sendUserDataMessage(JSON.stringify({projectPage:projectInfo.shortname}))
                });
        } else {
            var info=AtlasMakerWidget.container.find("#text-layer");
            info.html("<text x='5' y='15' fill='white'>ERROR: File is unreadable</text>");
            console.log("ERROR: Cannot read data. The file is maybe corrupt?");
        }
	});
}

$("#projectName").text(projectInfo.name);
$("#projectOwner").html("<a href='"+projectInfo.owner+"'>"+projectInfo.owner+"</a>");
var creation=new Date(projectInfo.created);
$("#projectCreated").text("Created on "+creation.toLocaleString());
$("#projectFilesNumber").text(projectInfo.files.list.length+" Files");
$("#projectCollaboratorsNumber").text(projectInfo.collaborators.length+" Collaborators");


// Init BrainBox
//---------------
    // select first file by default (should come from localStorage)
    var url=projectInfo.files.list[0].source;	
    BrainBox.initBrainBox()
    .then(function from_project(){return BrainBox.loadLabelsets()})
    .then(function from_project(){return loadProjectFile(url)})
    .then(function from_project(){
        $("#tools-side").detach().appendTo('#tools');
        // connect colours close button
        $(document).on('click', "#labels-close", function(){$("#labelset").hide()});
    });

// Bind the project's files to the table within #projectFiles
//------------------------------------------------------------
    var info_proxy = {};
    var objTemplate = [
        {	typeOfBinding:2,
            path:"files.list.#.name"
        },
        {
            typeOfBinding:1,
            path:"files.list.#.source",
            format:function(e, d){
                $(e).find("a").prop("href", location.origin+"/mri?url=" + d);
                $(e).find("a").html(d.split("/").pop());
            }
        }
    ];
    var trTemplate=[
        "<tr>",
        "	<td contentEditable=true class='noEmpty'></td>",
        "	<td><a></a></td>"
    ];
    // add the 'annotations' object to mri if not present
    for(k in projectInfo.files.list) {
        if (!(projectInfo.files.list[k].mri))
            projectInfo.files.list[k].mri = {};
        if (!(projectInfo.files.list[k].mri.annotations))
            projectInfo.files.list[k].mri.annotations = {};
    }
    // determine the type of display based on data type
    for(var g in annotations.text) {
        var annType = Object.prototype.toString.call(annotations.text[g].values);

        // array of values
        if(annType === "[object Array]") {
            trTemplate.push("<td><select value=0><option value='' disabled selected hidden>Empty</option>");
            for (var o in annotations.text[g].values) {
                trTemplate.push("<option value=\"" + annotations.text[g].values[o] + "\"" + ">" + annotations.text[g].values[o] + "</option>");
            }
            trTemplate.push("</select></td>");
        
            objTemplate.push({
                typeOfBinding:2,
                path:"files.list.#.mri.annotations." + annotations.text[g].name,
                format: function(e, d) {
                    if (d !=0) {
                        $(e).find("select").css("color", "rgba(255,255,255,1)");
                    }
                    $(e).find("select").get(0).value=d
                },
                parse: function(e) {
                    if ($(e).find("select").val()) {
                        $(e).find("select").css("color", "rgba(255,255,255,1)");
                    }
                    return $(e).find("select").val()
                }
            });
        } else
        // freeform text
        if(annType === "[object String]" || annotations.text[g].values === "freeform") {
            trTemplate.push("<td contentEditable=true class='noEmpty'></td>");
            objTemplate.push({
                typeOfBinding:2,
                path:"files.list.#.mri.annotations." + annotations.text[g].name
            });
        }
        /**
         * @todo This is the place where 'position' or 'length' annotations should be added
         */
    }
    trTemplate.push("</tr>");
    var aParam = {
        table: $("#projectFiles table"),
        info_proxy: info_proxy,
        info: projectInfo,
        trTemplate: trTemplate.join("\n"),
        objTemplate: objTemplate
    };
    for(var i=0;i<projectInfo.files.list.length;i++) {
        BrainBox.appendAnnotationTableRow(i,aParam);
    }
    // mark first row as selected
    $("#projectFiles tbody tr:eq(0)").addClass("selected");

// Autosave text data
//--------------------
    // send data when focus is lost (on blur)
    $(document).on('blur', "#projectFiles table tbody td", function(e) {
        var index = $(e.target).closest('tr').index();
        JSON.stringify(info_proxy); // update content of projectInfo object from proxy by calling all getters
        AtlasMakerWidget.sendSaveMetadataMessage(projectInfo.files.list[index]);
    });
    // blur when [enter] is clicked, to trigger data sending
    $(document).on('keydown', "#projectFiles table tbody td", function(e) {
        if(e.which==13 && $(e.target).attr('contenteditable')) {
            e.preventDefault();
            $(e.target).blur();
        }
    });
    // blur when <select> changes value to trigger data sending
    $("#projectFiles table tbody").on('change', "select", function(e) {
        $(e.target).blur();
    });

// listen to changes in file selection by clicking on the file table
$(document).on('click', "#projectFiles tbody tr",function() {
	var table=$(this).closest("table");
	var currentIndex=$(table).find("tr.selected").index();
	var index=$(this).index();

	if(index>=0 && currentIndex!=index) {
		$(table).find("tr").removeClass("selected");
		$(this).addClass("selected");
		// new url
		url=projectInfo.files.list[index].source;
				// remove table with previous annotations
		$("table#info tbody").html("");
		// load and bind new file
		loadProjectFile(url);
	}
});

// listen to changes in file selection by pressing the up/down arrows
$(document).on('keydown', function(e){
	var table=$("#projectFiles tbody");
	var index=$(table).find("tr.selected").index();
	
	if(e.keyCode!=38 && e.keyCode!=40)
		return;

	switch(e.keyCode) {
		case 38: // up
			index=(index+projectInfo.files.list.length-1)%projectInfo.files.list.length;
			break;
		case 40: // down
			index=(index+1)%projectInfo.files.list.length;
			break;
	}
	$(table).find("tr").removeClass("selected");
	$(table).find("tr:eq("+index+")").addClass("selected");
	
	// new url
	url=projectInfo.files.list[index].source;
	
	// remove table with previous annotations
	$("table#info tbody").html("");

	// load and bind new file
	loadProjectFile(url);
});

// listen to changes in selected annotation
$(document).on('click', "#info tbody tr", function () {
    var table=$(this).closest("tbody");
    var currentIndex=$(table).find("tr.selected").index();
    var index=$(this).index();

    if(index>=0 && currentIndex!=index) {
        $(table).find("tr").removeClass("selected");
        $(this).addClass("selected");
        
        var iarr,found=false;
        for(iarr=0;iarr<BrainBox.info.mri.atlas.length;iarr++) {
            if(BrainBox.info.mri.atlas[iarr].name==annotations.volume[index].name
                && BrainBox.info.mri.atlas[iarr].project==projectInfo.shortname) {
                found=true;
                break;
            }
        }
        if(found)
            AtlasMakerWidget.configureAtlasMaker(BrainBox.info,iarr);
        else
            console.log("ERROR: A quite unexpected one too...");
    }
});

// resize left tool bar
function resizeButton(p) {
	if($("#resizeButton").data("flag")==0) {
		$("#resizeButton").data({flag:1,x0:p.x,y0:p.y});
	} else if($("#resizeButton").data("flag")==1) {
		var d=$("#resizeButton").data("x0")-p.x;
		$("#left").css({'flex-basis':$("#left").width()-d});
		$("#resizeButton").data({x0:p.x,y0:p.y});
		AtlasMakerWidget.resizeWindow();
	}
}
$("#resizeButton").data({flag:-1,x0:0,y0:0});
$("#resizeButton").on('mousedown touchstart',function(e){$(this).data({flag:0,x0:e.pageX,y0:e.pageY})});
$("body").on('mousemove',function(e){resizeButton({x:e.pageX,y:e.pageY})});
$("body").on('touchmove',function(e){resizeButton({x:e.originalEvent.changedTouches[0].pageX,y:e.originalEvent.changedTouches[0].pageY})});
$("body").on('mouseup touchend',function(e){$("#resizeButton").data({flag:-1})});

$("#addProject").click(function(){location="/project/new"});
$("#settings").click(function(){
    var pathname=location.pathname;
    if(pathname.slice(-1)=="/")
        location=pathname+"settings";
    else
        location=pathname+"/settings";
});

</script>

</body>
</html>
