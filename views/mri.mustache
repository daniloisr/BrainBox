<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
	<link rel="shortcut icon" type="image/x-icon" href="/favicon.png" />
    <title>{{title}}</title>
	<link rel="stylesheet" href="/stylesheets/style.css" />
	<link href='https://fonts.googleapis.com/css?family=Roboto:100' rel='stylesheet' type='text/css'>
</head>

<style>
    td {
        word-break: break-word;
    }
    #content {
        margin: 0 auto;
    }
    #annotationsPane {
        background-color:#333;
        padding: 20px;
        margin-right: 20px;
        margin-bottom: 20px;
        max-width:900px;
        flex:0 1 auto;
        vertical-align:top
    }
    #annotationsPane th, #annotationsPane td {
        overflow: hidden;
    }
	.tabContent {
	    margin-left:10px;
        text-align: left;
	}
    #stereotaxic {
        min-width:600px;
    }
	/******************************** resizable layout ******************************/
	/* for larger screen (computer, big iPad, small iPad landscape) */
	@media all and (max-width: 1300px) {
	    #content {
	        flex-direction: column;
            max-width:700px;
	    }
        #annotationsPane {
            max-width:none;
            margin-right: 0px;
        }
        #stereotaxic {
            min-width: 100%;
        }
	}

	/* Loading indicator */
    @-webkit-keyframes loading {
        0% {left: 40%;}
        50% {left: 60%;}
        100% {left: 40%;}
    }
    #loadingIndicator {
        display:none;
        position:absolute;
        left:0;
        top:0;
        width:100%;
        height:100%;
        background:rgba(0,0,0,0.5);
    }
    #loadingIndicator .disc {
        position:absolute;
        left:50%;
        transform:translate( -50% , 0 );
        width:8px;
        height:8px;
        border-radius:8px;
        background:white;
        -webkit-animation-name: loading;
        -webkit-animation-duration: 1s;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: ease-in-out;
        animation-name: loading;
        animation-duration: 1s;
        animation-iteration-count: infinite;
        animation-timing-function: ease-in-out;
    }

	/************************************* access widget ********************************/
	.access {
        padding-top:5px;
        text-decoration:none;
        border:none;
    }
	.view, .edit, .add, .remove {
		/* cursor: pointer; */
		padding:1px 1px 1px 0px;
	}
	.view:before, .edit:before, .add:before, .remove:before {
		background-size: 15px 15px;
		width: 15px;
		height: 15px;
		content:"";
		display:inline-block;
		text-decoration: none;
	}
	/* view */
	[data-level="0"] .view:before {
		background-image: url("/img/eye.svg");
	}
	[data-level="1"] .view:before, [data-level="2"] .view:before, [data-level="3"] .view:before, [data-level="4"] .view:before {
		background-image: url("/img/eye-circle.svg");
	}
	/* edit */
	[data-level="0"] .edit:before, [data-level="1"] .edit:before {
		background-image: url("/img/pencil.svg");
	}
	[data-level="2"] .edit:before, [data-level="3"] .edit:before, [data-level="4"] .edit:before {
		background-image: url("/img/pencil-circle.svg");
	}
	/* add */
	[data-level="0"] .add:before, [data-level="1"] .add:before, [data-level="2"] .add:before {
		background-image: url("/img/plus-small.svg");
	}
	[data-level="3"] .add:before, [data-level="4"] .add:before {
		background-image: url("/img/plus-small-circle.svg");
	}
	/* remove */
	[data-level="0"] .remove:before, [data-level="1"] .remove:before, [data-level="2"] .remove:before, [data-level="3"] .remove:before {
		background-image: url("/img/minus-small.svg");
	}
	[data-level="4"] .remove:before {
		background-image: url("/img/minus-small-circle.svg");
	}

    .a {
        border:thin solid #777;
        border-radius:3px;
        margin:1px;
        text-align:center;
    }
    .a:hover {
        opacity:0.5;
        -webkit-user-select:none;
        -moz-user-select:none;
        user-select:none;
    }
</style>

<body>

<div style="width:100%;height:100%;display:flex;flex-direction:column">
	
	<!-- Header (fixed height) -->
	<div style="flex:0 0 64px">
	    <!-- Top-right menu bar -->
		<div id="menu">
			<img id="addProject" class="button" title="add project" style='width:13px' src='/img/plus.svg'/>
			<img id="search" class="button" title="search" style='width:13px' src='/img/search.svg'/>
			<img id="doc" class="button" title="documentation" style='width:13px' src='/img/doc.svg'/>
			<a href="https://github.com/OpenNeuroLab/BrainBox/issues" target="_blank"><img id="bug" class="button" title="report a bug" style='width:14px' src='/img/bug.svg'/></a>
            <a href="https://github.com/OpenNeuroLab" target="_blank"><img id="github" class="button" title="join our github project" style='width:15px' src='/img/github.svg'/></a>
			<div id="MyLogin">
				<span>{{{login}}}</span>
			</div>
		</div>

        <!-- Small left-top logo -->
        <div style="display:inline-block;margin:10px">
            <a href='/' style="text-decoration:none">
                <img style='height:56px;vertical-align:middle' src='/img/brainbox-logo-small_noFont.svg'/>
            </a><span style="font-family: Roboto, sans-serif; font-size: 36px; font-weight:100;vertical-align:middle" id="fontLogo"> 
                <a href='/' style="font-family: Roboto, sans-serif; font-size: 36px; font-weight:100; text-decoration:none">BrainBox</a>
            </span>
        </div>
	</div>
	
	<!-- Content (variable height) -->
	<div style="flex:1 0 auto">
			
		<!-- Splash -->
		<div id='splash'>
			<a href='/'>
				<img id='logo' src='/img/brainbox-logo.svg'/>
			</a>
			<div id='msgLog'></div>
		</div>
		<!-- End Splash -->
				
		<!-- Data -->
		<div id="data">		
			<!-- Data Flex -->
			<div id="content" style="display:flex;justify-content:center">
					<!-- Annotations -->
					<div style="flex:0 1 auto">
                        <div id="annotationsPane">
                            <table>
                                <tr>
                                <th><b>Name</b></th>
                                <td><span id="name" contentEditable=true class='noEmpty'></span></td>
                                </tr>
                            
                                <tr>
                                <th><b>Data&nbsp;source</b></th>
                                <td><span id="source" style="word-break:break-all"></span></td>
                                </tr>
                            
                                <tr>
                                <th><b>Inclusion&nbsp;date</b></th>
                                <td><span id="included"></span></td>
                                </tr>
                            </table>

                            <br/>
                        
                            <b>Volume Annotations</b><br/>
                            <table id="annotations" class="tabContent">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Value</th>
                                    <th>Project</th>
                                    <th>Modified</th>
                                    <th style="width:80px">Access</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            </table>
                            <div style="text-align:right">
                                <span id="annotationMessage"></span>
                                <img id="addAnnotation"    class="button" style="width:19px; height:19px" src='/img/plus-square.svg'/>
                                <img id="removeAnnotation" class="button" style="width:19px; height:19px" src='/img/minus-square.svg'/>
                            </div>

                            <b>Text Annotations</b><br/>
                            <table id="textAnnotations" class="tabContent">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Value</th>
                                    <th>Project</th>
                                    <th>Modified</th>
                                    <th style="width:80px">Access</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            </table>
                            <div style="text-align:right">
                                <span id="textAnnotationMessage"></span>
                                <img id="addTextAnnotation"    class="button" style="width:19px; height:19px" src='/img/plus-square.svg'/>
                                <img id="removeTextAnnotation" class="button" style="width:19px; height:19px" src='/img/minus-square.svg'/>
                            </div>

                        </div>
                    </div>
                    <!-- end of Annotations -->

					<!-- AtlasMaker -->
					<div style="flex:0 0 auto;position:relative">
						<!-- AtlasMaker -->
						<div id="stereotaxic" style="width:100%;display:inline-block">
						</div>
						<!-- End AtlasMaker -->

                        <!-- Loading indicator -->
                        <div id="loadingIndicator">
                            <p>Loading...</p>
                            <div class="disc"></div>
                        </div>
                        <!-- End Loading indicator -->
					</div>
			</div>
			<!-- End Data Flex -->
		</div>
		<!-- End Data -->

		<!-- Labels -->
		<div id="labelset">
			<div style="z-index:23;text-align:right">
				<img id="labels-close" class="button" src="/img/times-circle.svg"/>
			</div>

			<ul style="padding-left:1rem">
				<li>
					<b>Label Set</b><br/>
					<span id="labels-name"></span>
				</li>
				<li>
					<b>Labels</b><br/>
					<div id="label-list">
					</div>
					<div id="label-template">
						<div class="label-color"></div>
						<span class="label-name">Label Name</name>
					</div>
				</li>
			</ul>
		</div>
		<!-- End Labels -->

	</div>
	<!-- End Content -->
	
	<!-- Space (fixed height) -->
	<div style="flex:0 0 50px">
	</div>

	<!-- Footer (fixed height) -->
	<div style="flex:0 0 100px;background-color:#000">
		<p style="width:100%;font-size:small;text-align:center"> 
			<a target="_blank" href="http://neuroanatomy.github.io">
				<img src="img/naat-bw.svg" style="width:28px;height:28px;margin-right:4px;display:inline-block;vertical-align:middle"/></a>
			<a target="_blank" href="http://neuroanatomy.github.io" class="linkNoULine">
				group de neuroanatomie appliquée et théorique
			</a>
		</p>
	</div>
</div>

<script src="/lib/jquery-3.1.1.min.js"></script>
<script src="/lib/pako/pako.min.js"></script>
<script src="/lib/purify.min.js"></script>
<script src="/lib/json-patch-duplex.min.js"></script>
<script src="/js/twoWayBinding.js"></script>
<script src="/js/brainbox.js"></script>

<script>

var params={{{params}}};
var mriInfo={{{mriInfo}}};
var mriInfoOrig;
var textAnnotationsArray = [];
var version=1;
var info_proxy={};
var hash_old;

if( $.isEmptyObject(mriInfo)) {
    $("#stereotaxic").prepend("<h2>ERROR: Cannot read the data.</h2><p>The file is maybe corrupt?</p>");
    console.log("ERROR: Cannot read data. The file is maybe corrupt?");

    $("#annotationsPane").hide();
    $("#data").show();

} else {
    params.info=mriInfo;

    var fullscreen=false;
    if(params.fullscreen)
        params.fullscreen=(params.fullscreen=="true");

    // Present a splash screen while loading
    $("#intro").hide();
    $("#splash").show();

    $("#loadingIndicator").show();

    // Load data
    BrainBox.initBrainBox()
    .then(function(){return BrainBox.loadLabelsets()})
    .then(function(){return BrainBox.configureBrainBox(params)})
    .then(function(){
        // Remove splash
        $("#splash").hide();

        // backup the original MRI info
        mriInfoOrig = JSON.parse(JSON.stringify(BrainBox.info));
         
        // Serialise text annotations object (text annotations are stored as objects in the
        // database, but used as an array here)
        if(mriInfo.mri && mriInfo.mri.annotations) {
            textAnnotationsArray = annotationsObjectToArray(mriInfo.mri.annotations);
        }

    // Bind general information
    //--------------------------
        bind2(info_proxy,BrainBox.info,"name",$("#name"));
        bind1(info_proxy,BrainBox.info,"source",$("#source"));
        bind1(info_proxy,BrainBox.info,"included",$("#included"),date_format);

        
    // Bind volume-type annotations
    //------------------------------
        var volAnnParam = {
            table: $("table#annotations"),
            info_proxy: info_proxy,
            info: BrainBox.info,
            trTemplate: $.map([
                "<tr>",
                " <td contentEditable=true class='noEmpty'></td>", // name
                " <td><select>",$.map(BrainBox.labelSets,function(o){return "<option>"+o.name+"</option>"}),"</select></td>",	// value
                " <td contentEditable=true class='noEmpty'></td>", // project
                " <td></td>", // modified
                " <td>", // access
                "  <div class='access'>",
                "   <span class='view' title='view annotations'></span>",
                "   <span class='edit' title='edit annotations'></span>",
                "   <span class='add' title='add annotations'></span>",
                "   <span class='remove' title='remove annotations'></span>",
                "  </div>",
                " </td>",
                "</tr>"],function(o){return o}).join(""),
            objTemplate: [
                {	typeOfBinding:2,
                    path:"mri.atlas.#.name" // name
                },
                {	typeOfBinding:2,
                    path:"mri.atlas.#.labels", //value
                    format: function(e,d){$(e).find("select").prop('selectedIndex',$.map(BrainBox.labelSets,function(o){return o.source}).indexOf(d))},
                    parse: function(e){var name=$(e).find("select").val(),i=$.map(BrainBox.labelSets,function(o){return o.name}).indexOf(name);return BrainBox.labelSets[i].source}
                },
                {	typeOfBinding:2, // project
                    path:"mri.atlas.#.project"
                },
                {	typeOfBinding:1,
                    path:"mri.atlas.#.modified",
                    format: date_format
                },
                {	typeOfBinding:1,
                    path:"mri.atlas.#.access",
                    format: function(e,d){$(e).find(".access").attr('data-level',["none","view","edit","add","remove"].indexOf(d))},
                    parse: function(e){var level=$(e).find(".access").attr("data-level");return ["none","view","edit","add","remove"][level]}
                }
            ]
        };
        for(var i=0;i<BrainBox.info.mri.atlas.length;i++) {
            BrainBox.appendAnnotationTableRow(i,volAnnParam);
        }
        // connect pop-down menus
        $(document).on('change', "table#annotations select", function(){
            var col=$("table#annotations tr:eq(0) th:eq("+$(this).closest('td')[0].cellIndex+")").text();
            var index=$(this).closest('tr')[0].rowIndex-1;
            switch(col) {
                case "Value":
                    var url="/labels/" + info_proxy["mri.atlas."+index+".labels"];
                    $.getJSON(url,function(json) {
                        AtlasMakerWidget.configureOntology(json);
                        AtlasMakerWidget.changePenColor(0);
                        AtlasMakerWidget.brain_img.img=null; // to force redraw with new colors
                        AtlasMakerWidget.drawImages();
                        $("#loadingIndicator").hide();
                    });
                    break;
            }
        });
        // volume annotation table: select row
        $(document).on('click touchstart', "#annotations tr",function(){BrainBox.selectAnnotationTableRow($(this).index(),volAnnParam)});
        // volume annotations table: add, remove and save annotations
        $(document).on('click touchstart', "#addAnnotation", function(){addAnnotation(volAnnParam)});
        $(document).on('click touchstart', "#removeAnnotation", function(){removeAnnotation(volAnnParam)});
        // volume annotations table: select the first row by default
        $("table#annotations tr").removeClass("selected");
        $("table#annotations tr").eq(1).addClass("selected");
        
    // Bind text annotations
    //-----------------------
        var textAnnParam;
        var trTemplate;
        var objTemplate;
        var i, j, p, n;
        trTemplate = [
            "<tr>",
            " <td contentEditable=true class='noEmpty'></td>", // name
            " <td contentEditable=true class='noEmpty'></td>", // value
            " <td contentEditable=true class='noEmpty'></td>", // project
            " <td></td>", // modified
            " <td>", // access
            "  <div class='access'>",
            "   <span class='view' title='view annotations'></span>",
            "   <span class='edit' title='edit annotations'></span>",
            "   <span class='add' title='add annotations'></span>",
            "   <span class='remove' title='remove annotations'></span>",
            "  </div>",
            " </td>",
            "</tr>"
        ].join("");
        objTemplate = [
            {   typeOfBinding:2,
                path:"#.name", // name
            },
            {   typeOfBinding:2,
                path:"#.data" // data
            },
            {   typeOfBinding:2,
                path:"#.project", // project
            },
            {   typeOfBinding:1,
                path:"#.modified", // modified
                format: date_format
            },
            {	typeOfBinding:1,
                path:"#.access",
                format: function(e,d){$(e).find(".access").attr('data-level',["none","view","edit","add","remove"].indexOf(d))},
                parse: function(e){var level=$(e).find(".access").attr("data-level");return ["none","view","edit","add","remove"][level]}
            }
        ];
        textAnnParam = {
            table: $("table#textAnnotations"),
            info_proxy: info_proxy,
            info: textAnnotationsArray,
            trTemplate: trTemplate,
            objTemplate: objTemplate
        };
        for(i=0;i<textAnnotationsArray.length;i++) {
            BrainBox.appendAnnotationTableRow(i,textAnnParam);
        }
        $(document).on('click touchstart', "#textAnnotations tr",function() {
    		var table=$(this).closest("tbody");
            $(table).find("tr").removeClass("selected");
            $(this).addClass("selected");
        });
        $(document).on('click touchstart', "#addTextAnnotation", function(){addTextAnnotation(textAnnParam)});
        $(document).on('click touchstart', "#removeTextAnnotation", function(){removeTextAnnotation(textAnnParam)});

        // text annotations table: select the first row by default
        $("table#textAnnotations tr").removeClass("selected");
        $("table#textAnnotations tr").eq(1).addClass("selected");
        
        // connect close button in labels set
        $(document).on('click touchstart', "#labels-close", function(){$("#labelset").hide()});

        $("#data").show();

        // Listen to changes that trigger a metadata save
        //------------------------------------------------
            // send data when focus is lost (on blur)
            $(document).on('blur', "[contenteditable]", function from_project(e) {
                saveAnnotationsChange(BrainBox.info);
            });
            // blur when [enter] is clicked, to trigger data sending
            $(document).on('keydown', "[contenteditable]", function(e) {
                if(e.which==13 && $(e.target).attr('contenteditable')) {
                    e.preventDefault();
                    $(e.target).blur();
                }
            });
            // blur when <select> changes value to trigger data sending
            $("#annotations tbody, #textAnnotations tbody").on('change', "select", function(e) {
                $(e.target).blur();
                saveAnnotationsChange(BrainBox.info);
            });
        
    },function(){
        $("#msgLog").html("ERROR: Can't load data");
    });
}

$("#addProject").click(function(){location="/project/new"});

function annotationsArrayToObject(arr) {
    var i,j,project,name,obj={};
    for(i=0;i<arr.length;i++) {
        project = arr[i].project;
        name = arr[i].name;
        if(!obj[project])
            obj[project]={};
        obj[project][name]=JSON.parse(JSON.stringify(arr[i]));
        delete obj[project][name].project;
        delete obj[project][name].name;
    }
    return obj;
}
function annotationsObjectToArray(obj) {
    var i,j,arr=[];
    for(i in obj) {
        for(j in obj[i]) {
            var o=obj[i][j];
            o.project=i;
            o.name=j;
            arr.push(o);
        }
    }
    return arr;
}
/**
 * @function addAnnotation
 * @desc Add an empty volume annotation
 */
function addAnnotation(param) {
    var date=new Date();
    var i, found;
    
    // check that there is no other empty annotation already created
    found = false;
    for(i=0;i<BrainBox.info.mri.atlas.length;i++) {
        if(BrainBox.info.mri.atlas[i].name === "" && BrainBox.info.mri.atlas[i].project === "") {
            found = true;
            break;
        }
    }
    if(found) {
        $("#annotationMessage").text("An empty annotation already exists");
        setTimeout(function(){$("#annotationMessage").text("")},2000);
        return;
    }
    
    // add data to annotations array
    BrainBox.info.mri.atlas.push({
        name:"",
        project:"",
        access: "edit", 
        created: date.toJSON(), 
        modified: date.toJSON(), 
        filename: Math.random().toString(36).slice(2)+".nii.gz",	// automatically generated filename
        labels: "foreground.json",
        owner: AtlasMakerWidget.User.username,
        type: "volume"
    });

    // add and bind new table row
    var i=BrainBox.info.mri.atlas.length-1;
    BrainBox.appendAnnotationTableRow(i,param);
    
    //select new annotation
    BrainBox.selectAnnotationTableRow(i,param);

    // update in server
    saveAnnotationsChange(BrainBox.info);
}
/**
 * @function removeAnnotation
 */
function removeAnnotation(param) {
    // find row index
    var index=$(param.table).find("tbody .selected").index();
    
    // remove row from table
    $(param.table).find('tbody tr:eq('+index+')').remove();
    
    // select previous row (or 1st one)
    BrainBox.selectAnnotationTableRow(Math.max(0,index-1),param);

    // remove binding
    JSON.stringify(param.info_proxy); // update BrainBox.info from info_proxy
    var irow=BrainBox.info.mri.atlas.length-1;
    for(var icol=0; icol<param.objTemplate.length; icol++) {
        unbind2(param.info_proxy,param.objTemplate[icol].path.replace("#", irow));
    }

    // remove row from BrainBox.info.mri.atlas
    BrainBox.info.mri.atlas.splice(index,1);

    // update in server
    saveAnnotationsChange(BrainBox.info);
}
/**
 * @function addTextAnnotation
 */
function addTextAnnotation(param) {
    var date=new Date();
    var i;
    
    // check that there is no other empty annotation already created
    if(BrainBox.info.mri.annotations[""] && BrainBox.info.mri.annotations[""][""]) {
        $("#textAnnotationMessage").text("An empty annotation already exists");
        setTimeout(function(){$("#textAnnotationMessage").text("")},2000);
        return;
    }

    // add data to annotations array
    textAnnotationsArray.push({
        name:"",
        project:"",
        access: "edit", 
        created: date.toJSON(), 
        modified: date.toJSON(), 
        owner: AtlasMakerWidget.User.username,
        type: "text",
        data: ""
    });
    // add and bind new table row
    var i=textAnnotationsArray.length-1;
    BrainBox.appendAnnotationTableRow(i,param);

    //select new annotation
    selectTextAnnotationTableRow(i,param);

    // save change
    saveAnnotationsChange(BrainBox.info);
}
/**
 * @function removeTextAnnotation
 */
function removeTextAnnotation(param) {
    var index=$(param.table).find("tbody .selected").index();
    $(param.table).find('tbody tr:eq('+index+')').remove();
    // remove binding
    JSON.stringify(param.info_proxy); // update textAnnotationsArray from info_proxy
    var irow=textAnnotationsArray.length-1;
    for(var icol=0; icol<param.objTemplate.length; icol++) {
        unbind2(param.info_proxy,param.objTemplate[icol].path.replace("#", irow));
    }
    // remove row from textAnnotationsArray
    textAnnotationsArray.splice(index,1);

    // select previous row (or 1st one)
    selectTextAnnotationTableRow(Math.max(0,index-1),param);

    // save change
    saveAnnotationsChange(BrainBox.info);
}
function selectTextAnnotationTableRow(index,param) {
    var table=param.table;
    var currentIndex=$(table).find("tr.selected").index();

    if(index>=0 && currentIndex!=index) {
        $(table).find("tr").removeClass("selected");
        $(table).find('tbody tr:eq('+index+')').addClass("selected");
    }
}
/**
 * @function saveAnnotationsChange
 */
function saveAnnotationsChange(info) {
    var i, j;
    
    // update content of projectInfo object from proxy by calling all getters
    JSON.stringify(info_proxy);

    // check the info object for duplicate volume annotations
    for(i=0;i<info.mri.atlas.length-1;i++) {
        for(j=i+1;j<info.mri.atlas.length;j++) {
            if( info.mri.atlas[i].name === info.mri.atlas[j].name
                && info.mri.atlas[i].project === info.mri.atlas[j].project) {
                $("#annotationMessage").text("There is already an annotation with that name and project");
                setTimeout(function(){$("#annotationMessage").text("")},2000);
                $.extend(true, info.mri, mriInfoOrig.mri);
                return;
            }
        }
    }

    // check the info object for duplicate text annotations
    found = false;
    for(i=0;i<textAnnotationsArray.length-1;i++) {
        for(j=i+1;j<textAnnotationsArray.length;j++) {
            if( textAnnotationsArray[i].name === textAnnotationsArray[j].name
                && textAnnotationsArray[i].project === textAnnotationsArray[j].project) {
                $("#textAnnotationMessage").text("There is already an annotation with that name and project");
                setTimeout(function(){$("#textAnnotationMessage").text("")},2000);
                $.extend(true, textAnnotationsArray, annotationsObjectToArray(mriInfoOrig.mri.annotations));
                return;
            }
        }
    }
        
    // convert the text annotations array into an object
    info.mri.annotations = annotationsArrayToObject(textAnnotationsArray);
    
    // compute a diff patch between the new and old versions of the info object
    var patch = jsonpatch.compare(mriInfoOrig, info);
    if(patch.length == 0) {
        console.log("Nothing changed");
        return;
    }
    
    // send the patch to the server and update the stored version
    AtlasMakerWidget.sendSaveMetadataMessage(info,"patch",patch)
    .then(function() {
        mriInfoOrig = JSON.parse(JSON.stringify(info));
    });
}
</script>


</body>
</html>
