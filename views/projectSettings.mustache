<html>

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"> 
	<link rel="shortcut icon" type="image/x-icon" href="/favicon.png" />
    <title>{{projectShortname}}</title>
	
	<link rel="stylesheet" href="/stylesheets/style.css" />
	
	<link rel="stylesheet" href="/lib/jquery-ui.css"><!--https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css-->
	<link rel="stylesheet" href='https://fonts.googleapis.com/css?family=Roboto:100' type='text/css'>

	<style>
	/******************************** table ***************************************/
	.selection-header {
		padding-bottom:4px;
		text-align:left;
		height:20px;
	}
	.tab.selected {
		background:#333;
	}
	.tabContent {
	    margin-left:10px;
	}
	tr.selected{
		background-color:#444;
	}
	td {
	    word-break: break-word;
	}
	#MRIFiles, #annotations, #access {
		color:white;
		text-align:left;
		width:100%;
		border-collapse:collapse;
	}
	#MRIFiles tr, #annotations tr, #access tr {
		margin:0px 4px;
	}
	#MRIFiles, #annotations, #access,
	#MRIFiles th, #annotations th, #access th {
		border-bottom:thin solid white;
	}
	#MRIFiles a, #annotations a, #access a {
		text-decoration:none;
	}

	/************************************ dropdown menu ********************************/
	.autocomplete {
		border:none;
		border-radius: 0px;
		outline: none;
		padding: 0px 0px 5px 0px;
		vertical-align: bottom;
	}

	.ui-widget.ui-widget-content{
		background: #222;
		color: white;
		border: none;
	}

	.ui-widget-header:active {
		border:none;
	}

	.ui-state-active,
    .ui-widget-content .ui-state-active,
    .ui-widget-header .ui-state-active,
    a.ui-button:active,
    .ui-button:active,
    .ui-button.ui-state-active:hover {
        background: #555 !important;
		color:white;
		border: none;
		outline: none;
		display: block;
    }
 
	li div {
	  	color: white; /* text color */
	  	border:none;
	  	margin: none;
	  	padding: none;
	}

    .display {
        padding-top:5px;
        text-decoration:none;
        border:none;
    }

	/************************************* access widget ********************************/
	.access {
        padding-top:5px;
        text-decoration:none;
        border:none;
    }
	.view, .edit, .add, .remove, .check {
		cursor: pointer;
		padding:1px 1px 1px 0px;
	}
	.view:before, .edit:before, .add:before, .remove:before, .check:before {
		background-size: 15px 15px;
		width: 15px;
		height: 15px;
		content:"";
		display:inline-block;
		text-decoration: none;
	}
	/* view */
	[data-level="0"] .view:before {
		background-image: url("/img/eye.svg");
	}
	[data-level="1"] .view:before, [data-level="2"] .view:before, [data-level="3"] .view:before, [data-level="4"] .view:before {
		background-image: url("/img/eye-circle.svg");
	}
	/* edit */
	[data-level="0"] .edit:before, [data-level="1"] .edit:before {
		background-image: url("/img/pencil.svg");
	}
	[data-level="2"] .edit:before, [data-level="3"] .edit:before, [data-level="4"] .edit:before {
		background-image: url("/img/pencil-circle.svg");
	}
	/* add */
	[data-level="0"] .add:before, [data-level="1"] .add:before, [data-level="2"] .add:before {
		background-image: url("/img/plus-small.svg");
	}
	[data-level="3"] .add:before, [data-level="4"] .add:before {
		background-image: url("/img/plus-small-circle.svg");
	}
	/* remove */
	[data-level="0"] .remove:before, [data-level="1"] .remove:before, [data-level="2"] .remove:before, [data-level="3"] .remove:before {
		background-image: url("/img/minus-small.svg");
	}
	[data-level="4"] .remove:before {
		background-image: url("/img/minus-small-circle.svg");
	}

	/************************************ checkbox for display ******************************/ 
	[data-check="0"] .check:before {
		background-image: url("/img/check.svg");
	}

	[data-check="1"] .check:before {
		background-image: url("/img/checked.svg");
	}

	/******************************** resizable layout ******************************/
	#littleDescription:focus:before {
        content: none !important;
	}

	#littleDescription {
        outline: none;
    }

    #centeringDiv {
        position:relative;
        display:block;
        margin:0 auto;
    }
	#projImage {
        position:relative;
		display: inline-block;
		background:#333;
		width:200px;
		height:200px;
		vertical-align: top;
	}
	#projDescription {
		position: relative;
		display: inline-block;
        vertical-align: top;
	}
	#projTable {		
		position: relative;
		display:inline-block;
		min-height:400px;
		max-width: 900px;
		background:#333;
		padding:20px; 
		text-decoration:none;
        vertical-align: top;
	}
	
	#projDescription p {
	    margin: 0;
	}
	
	/* for larger screen (computer, big iPad, small iPad landscape) */
	@media all and (min-width: 1023px) {
		#centeringDiv {
			width:984px;
			padding:20px;
		}
        #projImage {
            float: left;
        }
		#projDescription {
			float: left;
			clear: both;
			width: 200px;
		}		
		#projTable {
			max-width: 900px;
			width: calc(100% - 260px);
			padding: 20px;
			margin-left: 20px;
		}
	}

	/* for smaller screen (small iPad portrait) */ 
	@media not all and (min-width: 1023px) {
		#centeringDiv {
			width:700px;
			padding:20px;
		}
		#projDescription {
			position: relative;
			top: 0px;
			left: 0px;
			padding-left:20px;
			padding-right: 20px;
			width:calc(100% - 300px);
			text-align: justify;
		}
		#projTable {
			position: relative;
			max-width: 700px;
			width:calc(100% - 40px);
			top: 20px;
			left: 0px;
		}
	}

	/* for even smaller screen (phone) */ 
	@media not all and (min-width: 739px) {
		#centeringDiv {
			text-align: center;
			width:600px;
			padding:10px;
		}
		#projDescription {
			position: relative;
			top: 0px;
			left: 0px;
			padding-left:10px;
			width:calc(100% - 20px);
			text-align: justify;
		}
		#projTable {
			position: relative;
			max-width: 600px;
			width:calc(100% - 40px);
			top: 20px;
			left: 0px;
		}
	}
	/* for even still smaller screen (phone) */ 
	@media not all and (min-width: 639px) {
		#centeringDiv {
			text-align: center;
			width:480px;
			padding:10px;
		}
		#projDescription {
			position: relative;
			top: 0px;
			left: 0px;
			padding-left:10px;
			width:calc(100% - 20px);
			text-align: justify;
		}
		#projTable {
			position: relative;
			max-width: 420px;
			width:calc(100% - 40px);
			top: 20px;
			left: 0px;
		}
	}
	
	/* button disabled */
	.disabled {
	    opacity: 0.4;
	    pointer-events: none;
	}

	</style>

</head>

<body>

<div style="width:100%;height:100%;display:flex;flex-direction:column">
	
	<!-- Header (fixed height) -->
	<div style="flex:0 0 64px">
	    <!-- Top-right menu bar -->
		<div id="menu">
			<img id="addProject" class="button" title="add project" style='width:13px' src='/img/plus.svg'/>
			<img id="search" class="button" title="search" style='width:13px' src='/img/search.svg'/>
			<img id="doc" class="button" title="documentation" style='width:13px' src='/img/doc.svg'/>
			<a href="https://github.com/OpenNeuroLab/BrainBox/issues" target="_blank"><img id="bug" class="button" title="report a bug" style='width:14px' src='/img/bug.svg'/></a>
			<div id="MyLogin">
				<span>{{{login}}}</span>
			</div>
		</div>

        <!-- Small left-top logo -->
        <div style="display:inline-block;margin:10px">
            <a href='/' style="text-decoration:none">
                <img style='height:56px;vertical-align:middle' src='/img/brainbox-logo-small_noFont.svg'/>
            </a>
            <span style="font-family: Roboto, sans-serif; font-size: 36px; font-weight:100;vertical-align:middle" id="projectName" contentEditable=true class="noEmptyWithPlaceholder" placeholder="Enter a project name"> 
            </span>
        </div>
	</div>
	
	<!-- Content (variable height) -->
	<div id="content" style="flex:1 0 auto;justify-content:center;position:relative">
	
		<!-- to center -->
		<div id="centeringDiv">

				<div id="projImage">
					<a href='/project/{{projectShortname}}'><svg width="100%" height="100%"></svg></a>
				</div>
				
				<div id="projDescription">
					<a href='/project/{{projectShortname}}'><h1>{{projectShortname}}</h1></a>
					<h2 id="url" contentEditable=true class="noEmptyWithPlaceholder" placeholder="Enter a project website"></h2>
					<p>by <a href='/user/{{owner}}'>{{owner}}</a></p>
					<p id="description" contentEditable=true class="noEmptyWithPlaceholder" placeholder="Enter a project description"></p>
					<p><span id="numCollaborators"></span> Collaborators</p>
					<p><span id="numAnnotations"></span> Annotations</p>
					<p><span id="numFiles"></span> MRI Files</p>
				</div>
				
				<div id="projTable">
						
							<!-- Tab Content 1: Access -->
							<h2 class="selection-header">Access</h2>
							<table id="access" class="tabContent" style="padding:10px;display:table">
								<thead>
									<tr>
										<th>Nickname</th>
										<th>Name</th>
										<th>Collaborators</th>
										<th>Annotations</th>
										<th>MRI Files</th>
									</tr>
								</thead>
								<tbody>
								</tbody>
							</table>
							<div style="text-align:right">
								<img id="addCollaborator" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/plus-square.svg' />
								<img id="removeCollaborator" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/minus-square.svg' />
							</div>
							
							
							<!-- Tab Content 2: Annotations -->
							<h2 class="selection-header">Annotations</h2>
							<table id="annotations" class="tabContent" style="padding:10px">
								<thead>
									<tr>
										<th>Name</th>
										<th>Type</th>
										<th>Value</th>
										<th>Display</th>
									</tr>
								</thead>
								<tbody>
								</tbody>
							</table>
							<div style="text-align:right">
								<img id="addAnnotation" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/plus-square.svg' />
								<img id="removeAnnotation" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/minus-square.svg' />
							</div>
							
							<!-- Tab Content 3: MRIs -->
							<h2 class="selection-header">MRI Files</h2>
							<table id="MRIFiles" class="tabContent" style="padding:10px">
								<thead>
									<tr>
										<th>URL</th>
										<th>Name</th>
									</tr>
								</thead>
								<tbody>
								</tbody>
							</table>
							<div style="text-align:right">
								<img id="importFiles" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/upload-square.svg' />
								<img id="addFile" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/plus-square.svg' />
								<img id="removeFile" class="button" style="width:20px; height:20px; margin:8 2 0 0" src='/img/minus-square.svg' />
							</div>
							
							<!-- Save or Cancel -->
							<div style="display:block;margin:0 auto;width:200px">
                                <h2 id="saveChanges" class="pushButton">Save Changes</h2>
                                <h2 id="deleteProject" class="pushButton">Delete Project</h2>
                                <h2 id="cancelChanges" class="pushButton">Cancel</h2>
                                <p id="saveFeedback"></p>
                            </div>
				</div>
		</div>
		<!-- end of centering div -->

	</div>
	<!-- End Content -->
	
	<!-- Space (fixed height) -->
	<div style="flex:0 0 50px">
	</div>

	<!-- Footer (fixed height) -->
	<div style="flex:0 0 100px;background-color:#000">
		<p style="width:100%;font-size:small;text-align:center"> 
			<a target="_blank" href="http://neuroanatomy.github.io">
				<img src="/img/naat-bw.svg" style="width:28px;height:28px;margin-right:4px;display:inline-block;vertical-align:middle"/></a>
			<a target="_blank" href="http://neuroanatomy.github.io" class="linkNoULine">
				group de neuroanatomie appliquée et théorique
			</a>
		</p>
	</div>
	
    <!-- Import files -->
    <!-- black overlay -->
    <div id='importFilesDialog' style='display:none;position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,0.7);z-index:100'>
        <!-- centered content -->
        <div style='position:relative;padding:1rem;margin:2rem auto;background-color:#333;max-width:600px;text-align:center;border:1px solid #777;height:calc(100% - 4rem);box-sizing:border-box'>
            <!-- overflow: scroll -->
            <div style='display:inline-block;max-width:600px;padding:2rem;overflow:scroll;max-height:calc(100% - 10rem)'>
                <table>
                    <thead>
                        <tr>
                            <th>URL</th>
                            <th>Name</th>
                        </tr>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <!-- Import/Cancel buttons -->
            <div style="display:block;margin:0 auto;max-width:200px">
                <h2 id="importFilesDialogOk" class="pushButton">Import</h2>
                <h2 id="importFilesDialogCancel" class="pushButton">Cancel</h2>
            </div>
        </div>
    </div>
	
</div>

<script src="/lib/jquery-3.1.1.min.js"></script>
<script src="/lib/jquery-ui.min.js"></script><!--https://code.jquery.com/ui/1.12.1/jquery-ui.min.js-->
<script src="/lib/jdenticon.min.js"></script><!--https://cdn.jsdelivr.net/jdenticon/1.3.2/jdenticon.min.js-->
<script src="/lib/md5.min.js"></script><!--https://cdn.jsdelivr.net/js-md5/0.3.0/md5.min.js"-->
<script src="/lib/purify.min.js"></script>
<script src="/js/twoWayBinding.js"></script>
<script src="/js/brainbox.js"></script>

<script>

//TODO  check and be sure the user picks a username from the dropdown menu
//TODO  implement the placeholder for the select tags in the anotation table
//TODO  find a way for the user to give a set of values for the annotations and make it obvious that it works this way

var projectInfo={{{projectInfo}}};

// Add avatar based on project's name
jdenticon.update($("svg")[0],md5("{{projectShortname}}"));

// WS Autocompletion
var cb, label;
var host = "ws://" + window.location.hostname + ":8080/";
if (window.WebSocket) {
    ws=new WebSocket(host);
} else if (window.MozWebSocket) {
    ws=new MozWebSocket(host);
}
ws.onmessage = function(message) {
    message = JSON.parse(message.data);
    if (message.type === "userNameQuery") {
        var arr;
        if(label=="nickname")
            arr=$.map(message.metadata,function(o){return {label:o.nickname,nickname:o.nickname,name:o.name}});
        if(label=="name")
            arr=$.map(message.metadata,function(o){return {label:o.name,nickname:o.nickname,name:o.name}});
        cb(arr);
    }
}

var projectInfoProxy={};

bind2(projectInfoProxy,projectInfo,"url","#projDescription #url");
bind2(projectInfoProxy,projectInfo,"description","#projDescription #description");
bind2(projectInfoProxy,projectInfo,"name","#projectName");

var accParam = {
    table: $("table#access"),
    info_proxy: projectInfoProxy,
    info: projectInfo,
    trTemplate: $.map([
        "<tr>",
        "    <td contentEditable=true class='noEmpty autocomplete' data-autocomplete='user.nickname'></td>",
        "    <td contentEditable=true class='noEmpty autocomplete' data-autocomplete='user.name'></td>",
        "    <td>",
        "        <div class='access' data-level=2>",
        "            <span class='view' title='view collaborators'></span>",
        "            <span class='edit' title='edit collaborators'></span>",
        "            <span class='add' title='add collaborators'></span>",
        "            <span class='remove' title='remove collaborators'></span>",
        "        </div>",
        "    </td>",
        "    <td>",
        "        <div class='access' data-level=2>",
        "            <span class='view' title='view annotations'></span>",
        "            <span class='edit' title='edit annotations'></span>",
        "            <span class='add' title='add annotations'></span>",
        "            <span class='remove' title='remove annotations'></span>",
        "        </div>",
        "    </td>",
        "    <td>",
        "        <div class='access' data-level=2>",
        "            <span class='view' title='view MRI files'></span>",
        "            <span class='edit' title='edit MRI files' ></span>",
        "            <span class='add' title='add MRI files'></span>",
        "            <span class='remove' title='remove MRI files'></span>",
        "        </div>",
        "    </td>",
        "</tr>"],function(o){return o}).join(""),
    objTemplate: [
        {	typeOfBinding:2,
            path:"collaborators.list.#.username" // nickname
        },
        {	typeOfBinding:2,
            path:"collaborators.list.#.name" // full name
        },
        {	typeOfBinding:2,
            path:"collaborators.list.#.access.collaborators",
            format: function(e,d){$(e).find(".access").attr('data-level',["none","view","edit","add","remove"].indexOf(d))},
            parse: function(e){var level=$(e).find(".access").attr("data-level");return ["none","view","edit","add","remove"][level]}
        },
        {	typeOfBinding:2,
            path:"collaborators.list.#.access.annotations",
            format: function(e,d){$(e).find(".access").attr('data-level',["none","view","edit","add","remove"].indexOf(d))},
            parse: function(e){var level=$(e).find(".access").attr("data-level");return ["none","view","edit","add","remove"][level]}
        },
        {	typeOfBinding:2,
            path:"collaborators.list.#.access.files",
            format: function(e,d){$(e).find(".access").attr('data-level',["none","view","edit","add","remove"].indexOf(d))},
            parse: function(e){var level=$(e).find(".access").attr("data-level");return ["none","view","edit","add","remove"][level]}
        }
    ]
};
for(var i=0;i<projectInfo.collaborators.list.length;i++) {
    BrainBox.appendAnnotationTableRow(i,accParam);
}

var annParam;
BrainBox.loadLabelsets()
.then(function () {
    annParam = {
        table: $("table#annotations"),
        info_proxy: projectInfoProxy,
        info: projectInfo,
        trTemplate: $.map([
            "<tr>",
            " <td contentEditable=true class='noEmpty'></td>",
            " <td><select>",BrainBox.annotationType.map(function(o){return "<option>"+o+"</option>"}),"</select></td>",	// append annotation types
            " <td contentEditable=true class='noEmpty'>",
            "  <select>",BrainBox.labelSets.map(function(o){return "<option>"+o.name+"</option>"}),"</select>",
            " </td>",	// append label sets
            " <td>","<div class='display' data-check=0>","<span class='check' title='display'></span>","</div>","</td>",
            "</tr>"],function(o){return o}).join(""),
        objTemplate: [
            {	typeOfBinding:2,
                path:"annotations.list.#.name"
            },
            {	typeOfBinding:2,
                path:"annotations.list.#.type",
                format: function(e,d){$(e).find("select").prop('selectedIndex',BrainBox.annotationType.indexOf(d))},
                parse: function(e){return $(e).find("select").val()}
            },
            {	typeOfBinding:2,
                path:"annotations.list.#.values",
                format: function (e,d) {
                    var t=$(e).closest("tr").find("td:eq(1) select").prop('selectedIndex');
                    if(t==0)
                        $(e).find("select").prop('selectedIndex',BrainBox.labelSets.map(function(o){return o.source}).indexOf(d));
                    else
                        $(e).html(d)
                },
                parse: function(e) {
                    var t=$(e).closest("tr").find("td:eq(1) select").prop('selectedIndex');
                    if(t==0)
                        return BrainBox.labelSets[$(e).find("select").prop('selectedIndex')].source;
                    else
                        return $(e).text();
                }
            },
            {	typeOfBinding:2,
                path:"annotations.list.#.display",
                format: function(e,d){$(e).find(".display").attr("data-check",(d=='true')?"1":"0")},
                parse: function(e){return ($(e).find(".display").attr("data-check")=="1"?'true':'false')}
            }
        ]
    };
    var i;
    for(i=0;i<projectInfo.annotations.list.length;i++) {
        BrainBox.appendAnnotationTableRow(i,annParam);
    }
    
    // Each project requires at least 1 volume-type annotation
    // Add a default one if there is none.
    var volAnnFound = false;
    for(i=0;i<projectInfo.annotations.list.length;i++) {
        if(projectInfo.annotations.list[i].type == "volume") {
            volAnnFound = true;
            break;
        }
    }
    if(volAnnFound == false) {
        addAnnotation(annParam);
    }
});

var filesParam = {
    table: $("table#MRIFiles"),
    info_proxy: projectInfoProxy,
    info: projectInfo,
    trTemplate: $.map([
        "<tr>",
        "    <td contentEditable=true class='noEmpty'></td>",
        "    <td contentEditable=true class='noEmpty'></td>",
        "</tr>"],function(o){return o}).join(""),
    objTemplate: [
        {	typeOfBinding:2,
            path:"files.list.#.source"
        },
        {	typeOfBinding:2,
            path:"files.list.#.name"
        }
    ]
};
for(var i=0;i<projectInfo.files.list.length;i++) {
    BrainBox.appendAnnotationTableRow(i,filesParam);
}

$("#projDescription #numFiles").text(projectInfo.files.list.length);
$("#projDescription #numAnnotations").text(projectInfo.annotations.list.length);
$("#projDescription #numCollaborators").text(projectInfo.collaborators.list.length);

// for the access widget
$("body").on('click',".view",function(e){onAccessClicked(e,0)});
$("body").on('click',".edit",function(e){onAccessClicked(e,1)});
$("body").on('click',".add",function(e){onAccessClicked(e,2)});
$("body").on('click',".remove",function(e){onAccessClicked(e,3)});
$("#access tbody").on('click','tr',function(e){selectRow(e);disableDeleteOnAnyoneUser(e);});

$("#annotations tbody").on('click','tr',selectRow);
$("#MRIFiles tbody").on('click','tr',selectRow);

$("#saveChanges").click(saveChanges);
$("#deleteProject").click(deleteProject);
$("#cancelChanges").click(function cancelChanges(){location.pathname='{{{projectURL}}}'});

$("body").on('click',".check",function(e){onCheckClicked(e)}); // for the display option

$(document).on('click', "#addCollaborator", function(){addCollaborator(accParam)});
$(document).on('click', "#removeCollaborator", function(){removeCollaborator(accParam)});
$("table#access tr").removeClass("selected");
$("table#access tbody tr").eq(0).addClass("selected");
$("table#access tbody tr:eq(0) td").removeAttr("contentEditable");
$("#removeCollaborator").addClass("disabled");

$(document).on('click', "#addAnnotation", function(){addAnnotation(annParam)});
$(document).on('click', "#removeAnnotation", function(){removeAnnotation(annParam)});
$("table#annotations tr").removeClass("selected");
$("table#annotations tbody tr").eq(0).addClass("selected");

$(document).on('click', "#addFile", function(){addFile(filesParam)});
$(document).on('click', "#removeFile", function(){removeFile(filesParam)});
$(document).on('click', "#importFiles", function(){importFiles()});
$("table#MRIFiles tr").removeClass("selected");
$("table#MRIFiles tbody tr").eq(0).addClass("selected");

$("#importFilesDialogOk").click(importFilesDialog);
$("#importFilesDialogCancel").click(function() {
    $("#importFilesDialog").hide();
});
$("#addProject").click(function(){location="/project/new"});

// listen to type of annotation changes
$("#annotations tbody").on('change', "td:nth-child(2) select", function(e) {
    var irow=$(e.target).closest("tr").index();
    var t=$(e.target).prop('selectedIndex');
    if(t==0) {
        var arr= [
            "<select>",
            BrainBox.labelSets.map(function(o){return "<option>"+o.name+"</option>"}),
            "</select>"
        ];
        var str=$.map(arr,function(o){return o}).join("");
        $("#annotations tbody  tr:eq("+irow+") td:eq(2)").html(str);
    } else {
        $("#annotations tbody  tr:eq("+irow+") td:eq(2)").html("");
    }
});


/**
 * @function onAccessClicked
 * @desc Handles click on one of the 5 access levels: 0=none, 1=view, 2=edit, 3=add, 4=remove
 * @param {Event} e Event triggered by the click
 * @param {int} l Base level of the access icon clicked
 */
function onAccessClicked( e, l ) {
	// access level 
	var al = $( e.target ).closest( "div" ).attr( "data-level" );
    $( e.target ).closest( "div" ).attr( "data-level",l+( al != (l+1) ) );
}

/** 
 * @function onCheckClicked
 * @desc Handles click on 'display' option for annotations in the project settings; 0=do not display; 1=display
 * @param {Event} e Event triggered by click
 */
function onCheckClicked( e, l ) {
	// checkbox toggle for 'display' option
	var checkbox = ($( e.target ).closest("div").attr( "data-check" ) === "1");
	if( checkbox == false ) {
    	$( e.target ).closest("div").attr( "data-check", "1" );
    }
    else {
    	$( e.target ).closest("div").attr( "data-check", "0" );
    }
}

function selectRow(e) {
	$(e.currentTarget).closest("tbody").find("tr").each(function(index, tag) {
		$(tag).removeClass("selected");
	})
	$(e.currentTarget).addClass("selected");
}
function disableDeleteOnAnyoneUser(e) {
    var curTable = $(e.currentTarget).closest("table").attr("id");

    // check if the selected row belongs to the #access table
    if(curTable === "access") {
        // check if the selected user is 'anyone'
        var rowIndex = $(e.currentTarget).closest("tbody").find("tr.selected").index();
        if(projectInfo.collaborators.list[rowIndex].userID === 'anyone') {
            // if yes, disable the 'remove' button
            $("#removeCollaborator").addClass('disabled');
        } else {
            $("#removeCollaborator").removeClass('disabled');
        }
    }
}

function importFilesDialog() {
    var sum=0;
    $("#importFilesDialog tbody tr").each(function(i,o) {
        var url=$(o).find("td:eq(0)").text();
        var name=$(o).find("td:eq(1)").text();
        var i,found;
        
        if(url.length<10)
            return;
        
        // update the projectInfo object by calling the proxy's getters
        JSON.stringify(projectInfoProxy);
        
        // look if the MRI file is not already in the list
        found=false;
        for(i in projectInfo.files.list) {
            if(projectInfo.files.list[i].source==url) {
                if(projectInfo.files.list[i].name=="")
                    projectInfoProxy["files.list."+i+".name"]=name;
                found=true;
                break;
            }
        }
        if(found===false) {
            projectInfo.files.list.push({source:url, name:name});

            // add and bind new table row
            var i=projectInfo.files.list.length-1;
            BrainBox.appendAnnotationTableRow(i,filesParam);

            $("#projDescription #numFiles").text(projectInfo.files.list.length);
            
            sum++;
        }
    });
    $("#importFilesDialog").hide();
    console.log(sum,"files added");
}
function addCollaborator(param) {
    projectInfo.collaborators.list.push({
        userID: "",
        access: {
            collaborators:"view",
            annotations:"view",
            files:"view"
        }
    });

    // add and bind new table row
    var i=projectInfo.collaborators.list.length-1;
    BrainBox.appendAnnotationTableRow(i,param);
    
    $(".autocomplete").autocomplete({
        minLength: 0,
        source: function(req,res) {
            var key = $(this.element).attr('data-autocomplete');
            switch(key) {
                case "user.nickname":
                    ws.send(JSON.stringify({"type":"userNameQuery", "metadata":{"nickname":req.term}}));
                    label="nickname";
                    break;
                case "user.name":
                    ws.send(JSON.stringify({"type":"userNameQuery", "metadata":{"name":req.term}}));
                    label="name";
                    break;
            }
            cb=res;
        },
        select:function(e,ui) {
            var irow=$(e.target).closest('tr').index();
            projectInfoProxy["collaborators.list."+irow+".name"]=ui.item.name;
            projectInfoProxy["collaborators.list."+irow+".userID"]=ui.item.nickname;

            // add user to access objects
            projectInfo.collaborators.list[irow].userID=ui.item.nickname;
        }
    });
    $("#projDescription #numCollaborators").text(projectInfo.collaborators.list.length);
}
function removeCollaborator(param) {
    // remove row from table
    var index=$(param.table).find("tbody .selected").index();
    $(param.table).find('tbody tr:eq('+index+')').remove();
    
    // remove binding
    JSON.stringify(param.info_proxy); // update projectInfo from projectInfoProxy
    var irow=projectInfo.collaborators.list.length-1;
    for(var icol=0; icol<param.objTemplate.length; icol++) {
        unbind2(param.info_proxy,param.objTemplate[icol].path.replace("#", irow));
    }
    
    // remove row from BrainBox.info.mri.atlas
    projectInfo.collaborators.list.splice(index,1);

    $("#projDescription #numCollaborators").text(projectInfo.collaborators.list.length);
}
function addAnnotation(param) {
    projectInfo.annotations.list.push({
        type:"volume",
        values:BrainBox.labelSets[0].source,
        display:"true"
    });

    // add and bind new table row
    var i=projectInfo.annotations.list.length-1;
    BrainBox.appendAnnotationTableRow(i,param);

    $("#projDescription #numAnnotations").text(projectInfo.annotations.list.length);
}
function removeAnnotation(param) {
    // remove row from table
    var index=$(param.table).find("tbody .selected").index();
    $(param.table).find('tbody tr:eq('+index+')').remove();
    
    // remove binding
    JSON.stringify(param.info_proxy); // update projectInfo from projectInfoProxy
    var irow=projectInfo.annotations.list.length-1;
    for(var icol=0; icol<param.objTemplate.length; icol++) {
        unbind2(param.info_proxy,param.objTemplate[icol].path.replace("#", irow));
    }
    
    // remove row from BrainBox.info.mri.atlas
    projectInfo.annotations.list.splice(index,1);

    $("#projDescription #numAnnotations").text(projectInfo.annotations.list.length);
}
function addFile(param) {
    projectInfo.files.list.push({});

    // add and bind new table row
    var i=projectInfo.files.list.length-1;
    BrainBox.appendAnnotationTableRow(i,param);

    $("#projDescription #numFiles").text(projectInfo.files.list.length);
}
function removeFile(param) {
    // remove row from table
    var index=$(param.table).find("tbody .selected").index();
    $(param.table).find('tbody tr:eq('+index+')').remove();
    
    // remove binding
    JSON.stringify(param.info_proxy); // update projectInfo from projectInfoProxy
    var irow=projectInfo.files.list.length-1;
    for(var icol=0; icol<param.objTemplate.length; icol++) {
        unbind2(param.info_proxy,param.objTemplate[icol].path.replace("#", irow));
    }
    
    // remove row from BrainBox.info.mri.atlas
    projectInfo.files.list.splice(index,1);

    $("#projDescription #numFiles").text(projectInfo.files.list.length);
    
    // select the closest remaining column
    $(param.table).find('tbody tr:eq('+(Math.min(index,projectInfo.files.list.length-1))+')').addClass('selected');
}
function importFiles() {
    // var input=document.getElementById("i-open-mesh");
    console.log("importing files...");
    $("body").append("<input id='importFilesInput' style='display:none'>");
    var input=$("#importFilesInput")[0];
    console.log(input);
    input.type="file";
    input.onchange=function(e){
        var file=this.files[0];
        var reader = new FileReader();
        reader.onload = function(e) {
            $("#importFilesInput").remove();
            $("#importFilesDialog").show();
            var result=e.target.result;
            var lines=result.split("\n");
            var html=[];           
            for(i in lines) {
                cols=lines[i].split(/[ ]*,[ ]*/);
                html.push("<tr><td contentEditable='true'>"+cols[0]+"</td><td>"+cols[1]+"</td></tr>");
            }
            $("#importFilesDialog tbody").append(html.join("\n"));
        }
        reader.readAsText(file);
    }
    input.click();
}
function saveChanges() {
    // update projectInfo from projectInfoProxy
    JSON.stringify(projectInfoProxy);

    $.post(
        "/project/json/"+projectInfo.shortname,
        {
            data:JSON.stringify(projectInfo)
        }
    ).done(function(a, b) {
    	if(a.success) {
            $("#saveFeedback").text("Successfully saved");
    	    setTimeout(function() {
    	        $("#saveFeedback").text("");
    	    },2000);
    	} else {
            $("#saveFeedback").text("Unable to save. Please try again later");
    	    setTimeout(function() {
    	        $("#saveFeedback").text("");
    	    },3000);
    	}
    }).catch(function(err) {
        $("#saveFeedback").text("Unable to save. Please try again later");
        setTimeout(function() {
            $("#saveFeedback").text("");
        },3000);
        console.log(err);
    });
}
function deleteProject() {
    // update projectInfo from projectInfoProxy
    JSON.stringify(projectInfoProxy);

    var res = confirm(
        "Are you sure you want to delete project "
        + projectInfo.shortname+"? "
        + "This operation cannot be undone."
    );
    
    if (res !== true) {
        return;
    }
    
    $.ajax({
        url: "/project/json/"+projectInfo.shortname,
        method: "delete",
        data:JSON.stringify(projectInfo)
    }).done(function(response) {
    	if(response.success) {
            $("#saveFeedback").text("Successfully deleted");
    	    setTimeout(function() {
    	        $("#saveFeedback").text("");
    	    },2000);
    	} else {
            $("#saveFeedback").text("Unable to delete");
    	    setTimeout(function() {
    	        $("#saveFeedback").text("");
    	    },3000);
    	}
        console.log(response.message);
    }).catch(function(err) {
        $("#saveFeedback").text("Unable to delete. Please try again later");
        setTimeout(function() {
            $("#saveFeedback").text("");
        },3000);
        console.log(err);
    });

}
</script>

</body>
</html>
